PROJECT -4   Creation of an " 2048 Puzzle " as part of your Python Programming internship 

Source code:
import tkinter as tk
import numpy as np
import random

class Game2048:
    def __init__(self, root):  # Fixed the method name
        self.root = root
        self.root.title("2048 Game")
        self.root.geometry("400x500")
        self.root.configure(bg="gray")
        
        self.grid_size = 4
        self.matrix = np.zeros((self.grid_size, self.grid_size), dtype=int)
        self.score = 0
        self.create_ui()
        self.add_new_tile()
        self.add_new_tile()
        self.update_ui()

    def create_ui(self):
        self.score_label = tk.Label(self.root, text="Score: 0", font=("Arial", 18), bg="gray")
        self.score_label.pack(pady=10)

        self.grid_frame = tk.Frame(self.root, bg="black")
        self.grid_frame.pack()
        self.cells = []

        for i in range(self.grid_size):
            row = []
            for j in range(self.grid_size):
                cell = tk.Label(self.grid_frame, text="", font=("Arial", 24), width=4, height=2)
                cell.grid(row=i, column=j, padx=5, pady=5)
                row.append(cell)
            self.cells.append(row)

        self.root.bind("<Up>", lambda _: self.move("up"))
        self.root.bind("<Down>", lambda _: self.move("down"))
        self.root.bind("<Left>", lambda _: self.move("left"))
        self.root.bind("<Right>", lambda _: self.move("right"))

        restart_button = tk.Button(self.root, text="Restart", font=("Arial", 16), command=self.restart_game)
        restart_button.pack(pady=20)

    def add_new_tile(self):
        empty_cells = [(i, j) for i in range(self.grid_size) for j in range(self.grid_size) if self.matrix[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            self.matrix[i][j] = random.choice([2, 4])

    def update_ui(self):
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                value = self.matrix[i][j]
                self.cells[i][j].config(text=str(value) if value != 0 else "", bg=self.get_color(value))
        self.score_label.config(text=f"Score: {self.score}")

    def get_color(self, value):
        colors = {
            0: "#cdc1b4", 2: "#eee4da", 4: "#ede0c8", 8: "#f2b179",
            16: "#f59563", 32: "#f67c5f", 64: "#f65e3b", 128: "#edcf72",
            256: "#edcc61", 512: "#edc850", 1024: "#edc53f", 2048: "#edc22e"
        }
        return colors.get(value, "#cdc1b4")

    def move(self, direction):
        if direction == "up":
            self.matrix = np.rot90(self.matrix, -1)
            moved, score = self.merge_tiles()
            self.matrix = np.rot90(self.matrix)
        elif direction == "down":
            self.matrix = np.rot90(self.matrix)
            moved, score = self.merge_tiles()
            self.matrix = np.rot90(self.matrix, -1)
        elif direction == "left":
            moved, score = self.merge_tiles()
        elif direction == "right":
            self.matrix = np.fliplr(self.matrix)
            moved, score = self.merge_tiles()
            self.matrix = np.fliplr(self.matrix)
        
        self.score += score
        if moved:
            self.add_new_tile()
            self.update_ui()
            if self.check_win():
                self.show_message("You reached 2048! You win!")
            elif not self.can_move():
                self.show_message("Game Over! No more moves left.")

    def merge_tiles(self):
        moved = False
        score = 0
        for i in range(self.grid_size):
            line = self.matrix[i][self.matrix[i] != 0]
            new_line = []
            skip = False
            for j in range(len(line)):
                if skip:
                    skip = False
                    continue
                if j + 1 < len(line) and line[j] == line[j + 1]:
                    new_line.append(line[j] * 2)
                    score += line[j] * 2
                    skip = True
                    moved = True
                else:
                    new_line.append(line[j])
            new_line += [0] * (self.grid_size - len(new_line))
            if not np.array_equal(new_line, self.matrix[i]):
                moved = True
            self.matrix[i] = new_line
        return moved, score

    def check_win(self):
        return 2048 in self.matrix

    def can_move(self):
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                if self.matrix[i][j] == 0:
                    return True
                if i + 1 < self.grid_size and self.matrix[i][j] == self.matrix[i + 1][j]:
                    return True
                if j + 1 < self.grid_size and self.matrix[i][j] == self.matrix[i][j + 1]:
                    return True
        return False

    def restart_game(self):
        self.matrix = np.zeros((self.grid_size, self.grid_size), dtype=int)
        self.score = 0
        self.add_new_tile()
        self.add_new_tile()
        self.update_ui()

    def show_message(self, message):
        popup = tk.Toplevel(self.root)
        popup.title("Message")
        tk.Label(popup, text=message, font=("Arial", 16)).pack(pady=20)
        tk.Button(popup, text="OK", command=popup.destroy).pack(pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    game = Game2048(root)
    root.mainloop()

